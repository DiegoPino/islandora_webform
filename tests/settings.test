<?php

/**
 * @file
 * Test the settings page for a webform
 */

class IslandoraWebformSettingsTestCase extends IslandoraCollectionWebTestCase {

  public $webform = NULL;

  public $user = NULL;

  public $collections = array();

  /**
   * Get test information.
   */
  public static function getInfo() {
    return array(
      'name' => 'Islandora Webform Settings',
      'description' => 'Tests the islandora webform settings page',
      'group' => 'Islandora Webform',
    );
  }

  /**
   * Set up the test environment.
   */
  public function setUp() {
    parent::setUp(array(
      'islandora',
      'islandora_webform',
      'webform',
      'islandora_large_image',
      'islandora_basic_collection',
      'imagemagick',
      'devel',
    ));

    // Create a user with permission to access this page.
    $this->user = $this->drupalCreateUser(array(
      'view fedora repository objects',
      'ingest fedora objects',
      'administer site configuration',
      'manage object properties',
      'delete fedora objects and datastreams',
      'create child collection',
      'manage islandora webform',
      'bypass node access',
      'administer nodes',
    ));
    $this->drupalLogin($this->user);

  }

  /**
   * Run several tests on the settings page.
   */
  public function testPage() {

    // Set up objects.
    $this->createObjects();

    // Verify the user can access this page.
    $this->drupalGet('node/' . $this->webform->nid . '/webform');
    $this->assertResponse('200', 'Response code is 200 - access permitted');
    $this->assertRaw(l(t('Islandora settings'), 'node/' . $this->webform->nid . '/webform/islandora'), '');

    $this->drupalGet('node/' . $this->webform->nid . '/webform/islandora');
    $this->assertResponse('200', 'Response code is 200 - access permitted');

    $filter_scenarios = array(
      'cmodel_manual' => array(
        'form_edit' => array(
          'islandora[cmodel_filter]' => 'islandora:sp_large_image_cmodel',
          'islandora[scope]' => 'tagged',
          'islandora[link_text]' => t('CModel Manual Webform Link'),
          'islandora[link_help]' => t('Some help text'),
        ),
        'test_against' => array(
          $this->collections[0],
        ),
      ),
      'cmodel' => array(
        'form_edit' => array(
          'islandora[cmodel_filter]' => 'islandora:sp_large_image_cmodel',
          'islandora[scope]' => 'all',
          'islandora[link_text]' => t('CModel Webform Link'),
          'islandora[link_help]' => t('Some help text'),
        ),
        'test_against' => array(
          $this->collections[0],
        ),
      ),
      'collection' => array(
        'form_edit' => array(
          'islandora[collection_filter]' => 'islandora:collection1',
          'islandora[scope]' => 'all',
          'islandora[link_text]' => t('Collection 1 Webform Link'),
          'islandora[link_help]' => t('Some help text'),
        ),
        'test_against' => array(
          $this->collections[0],
        ),
      ),
      'search_pid' => array(
        'form_edit' => array(
          'islandora[pid_filter]' => 'islandora:*+',
          'islandora[scope]' => 'all',
          'islandora[link_text]' => t('Numeric PID Webform Link'),
          'islandora[link_help]' => t('Some help text'),
        ),
        'test_against' => array(
          $this->collections[0],
        ),
      ),
    );


    foreach ($filter_scenarios as $filter_scenario) {

      // Apply these settings.
      $edit = array(
        'islandora[enabled]' => 1,
      );
      $edit = array_merge($edit, $filter_scenario['form_edit']);
      $this->drupalPost('node/' . $this->webform->nid . '/webform/islandora', $edit, 'Save configuration');

      foreach ($filter_scenario['test_against'] as $collection) {
        if (isset($collection['objects'][0])) {
          $path = 'islandora/object/' . $collection['objects'][0]->id;
          $this->drupalGet($path);
          if ($filter_scenario['form_edit']['islandora[scope]'] = 'tagged') {

            // Verify that there is no webform link currently.
            $this->assertNoLink($filter_scenario['form_edit']['islandora[link_text]'], 0, 'Webform link should not appear');
            $this->drupalPostAJAX(NULL, array(), 'add webform link: "' . $this->webform->title . '"');
            $this->assertLink($filter_scenario['form_edit']['islandora[link_text]'], 0, 'Webform link should have been added');
            $this->drupalPostAJAX(NULL, array(), '<- remove this link', 0);
            $this->assertNoLink($filter_scenario['form_edit']['islandora[link_text]'], 0, 'Webform link should have been removed');


          }
          else {
            $this->assertLink($filter_scenario['form_edit']['islandora[link-text'], 0, 'Webform link should appear');
          }
        }
      }
    }

    // Clean up repository from stuff we created.
    $this->destroyObjects();
  }

  /**
   * Create some test objects in two test collections.
   */
  public function createObjects() {
    // Create a webform to use for testing.
    $settings = array(
      'title' => 'Test webform, no components',
      'type' => 'webform',
    );
    $components = array(
      // Test textfield components.
      'textfield' => array(
        'component' => array(
          'form_key' => 'textfield',
          'name' => 'Textfield',
          'type' => 'textfield',
          'value' => '',
          'required' => '0',
          'pid' => '0',
          'weight' => '-14',
        ),
        'sample values' => '',
        'database values' => array(''),
        'database default values' => array(''),
      ),
    );
    $cid = 0;
    foreach ($components as $key => $component_info) {
      $cid++;
      $settings['webform']['components'][$cid] = $component_info['component'];
      $settings['webform']['components'][$cid]['cid'] = $cid;
      $settings['webform']['components'][$cid]['pid'] = 0;
    }
    $this->webform = $this->drupalCreateNode($settings);


    // Report if access is not permitted.
    $this->drupalGet('islandora');
    $root = $this->url;
    $path = $root . '/manage/overview/ingest';
    $this->drupalGet($path);
    $this->assertResponse('200', t('Response code is 200 - access permitted'));


    // Create two collections, each with one large image object.
    $collection_settings = array(
      0 => array(
        'collection_label' => 'Collection One',
        'collection_pid' => 'islandora:collection1',
        'collection_cmodel_pid' => 'islandora:sp_large_image_cmodel',
        'object_file' => drupal_get_path('module', 'islandora_large_image') . '/tests/fixtures/test.tiff',
      ),
      1 => array(
        'collection_label' => 'Collection Two',
        'collection_pid' => 'islandora:collection2',
        'collection_cmodel_pid' => 'islandora:sp_large_image_cmodel',
        'object_file' => drupal_get_path('module', 'islandora_large_image') . '/tests/fixtures/test.tiff',
      ),
    );

    // Create the collections as defined above.
    foreach ($collection_settings as $collection_setting) {

      // Create the collection object.
      $this->createTestCollection($collection_setting['collection_label'], $collection_setting['collection_cmodel_pid'], $collection_setting['collection_pid']);

      // Ingest an image object to put into the collection.
      $path = 'islandora/object/' . $collection_setting['collection_pid'] . '/manage/overview/ingest';
      $edit = array(
        'files[file]' => $collection_setting['object_file'],
      );
      $this->drupalPost($path, $edit, t('Ingest'));
      $object = $this->getObjectFromPath($this->url);

      // Arrange the collection and object and insert into $this->collections.
      $collection = array(
        'collection' => $this->getObjectFromPath('/islandora/object/' . $collection_setting['collection_pid']),
        'objects' => array(
          $object,
        ),

      );
      $this->collections[] = $collection;
    }
  }

  /**
   * Destroy all objects.
   */
  public function destroyObjects() {
    foreach ($this->collections as $collection) {
      foreach ($collection['objects'] as $object) {
        if (isset($object->id)) {
          $this->deleteObject($object->id, NULL, FALSE);
        }
      }
      $this->deleteTestCollection($collection['collection']->id);
    }
  }
}
