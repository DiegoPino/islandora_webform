<?php

/**
 * @file
 * Hooks and other always-needed functions for the islandora_webform_ingest
 * module.
 */

/**
 * Implements hook_menu().
 */
function islandora_webform_ingest_menu() {
  return array(
    'islandora_webform_submission/%ctools_js/ingest/%' => array(
      'title' => 'Ingest Webform Submission',
      'page callback' => 'iwi_preview_ingest_submission_form_callback',
      'page arguments' => array(1, 3),
      'access arguments' => array('ingest islandora webform submissions'),
    ),
    'islandora_webform_submission/ingest/%' => array(
      'title' => 'Ingest Webform Submission',
      'page callback' => 'iwi_preview_ingest_submission_form_callback',
      'page arguments' => array(FALSE, 2),
      'access arguments' => array('ingest islandora webform submissions'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function islandora_webform_ingest_permission() {
  return array(
    'ingest islandora webform submissions' => array(
      'title' => t('Ingest Islandora Webform Submissions'),
      'description' => t('Add content submitted by islandora webforms to metadata on objects in the repository.'),
    ),
    // TODO in the future: bulk ingest
//    'bulk ingest islandora webform submissions' => array(
//      'title' => t('Bulk Ingest Islandora Webform Submissions'),
//      'description' => t('Add content submitted by islandora webforms to metadata on objects in the repository.'),
//    ),
  );
}


/**
 * Implements hook_webform_submission_load().
 *
 * Add IslandoraFedoraObject to islandora webform submissions on load
 */
function islandora_webform_ingest_webform_submission_load(&$submissions) {
  foreach ($submissions as &$submission) {
    $submission->islandora_object = FALSE;
    $islandora_component_id = db_select('webform_component', 'wc')
      ->fields('wc', array('cid'))
      ->condition('nid', $submission->nid)
      ->condition('form_key', 'islandora_object_pid')
      ->execute()->fetchField();
    if ($islandora_component_id && !empty($submission->data[$islandora_component_id][0])) {
      $submission->islandora_object = islandora_object_load($submission->data[$islandora_component_id][0]);
    }
  }
}


/**
 * Implements hook_form_alter().
 *
 * Adds datastream mapping options to webform component edit form.
 */
function islandora_webform_ingest_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'webform_component_edit_form' && !empty($form['cid']['#value'])) {


    form_load_include($form_state, 'inc', 'islandora_webform_ingest', 'includes/utilities');
    form_load_include($form_state, 'inc', 'webform', 'components/select');
    form_load_include($form_state, 'inc', 'webform', 'components/file');

    if (!empty($form['type']['#value']) && in_array($form['type']['#value'], islandora_webform_ingest_get_component_types())) {

      $cmodel = iwi_webform_content_model($form['#node']->nid);

      if ($cmodel) {

        $cmodel = islandora_object_load($cmodel);

        // Get datastream mimetypes.
        $dsmimetypes = iwi_datastream_mime_from_component_type($form['type']['#value']);

        // Start building the form.
        $form['ingest'] = array(
          '#type' => 'fieldset',
          '#title' => 'Islandora Ingest Defaults',
          '#description' => t('Choose the datastream and field that this component should be ingested to. Note that this only sets the default, and can be overridden during the actual ingestion of a submission.'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#weight' => 5,
        );

        // Load most the form elements.
        $form['ingest'] = array_merge($form['ingest'], islandora_webform_ingest_form_ingest_mapping_fields($form, $form_state, $cmodel, $dsmimetypes));

        $form['#submit'][] = 'iwi_webform_component_edit_form_submit';
        $form['#validate'][] = 'iwi_webform_component_edit_form_validate';
      }
    }
  }
  else {
    if ($form_id == 'islandora_webform_configure_form') {

      $default_values = db_select('islandora_webform_ingest_webforms', 'm')
        ->fields('m')
        ->condition('m.nid', $form['nid']['#value'])
        ->execute()->fetchAssoc();

      $cmodel_options = array('' => 'Ingest to current object');
      form_load_include($form_state, 'inc', 'islandora', 'includes/utilities');
      $cmodels = islandora_get_content_models();
      asort($cmodels);
      foreach ($cmodels as $cmodel) {
        $cmodel_options[$cmodel['pid']] = t('Create new @cmodel', array('@cmodel' => $cmodel['label']));
      }

      $relation_options = array(
        'child' => t('Child of current object'),
        'sibling' => t('Sibling of current object'),
      );

      $form['islandora_ingest'] = array(
        '#type' => 'fieldset',
        '#title' => 'Islandora Ingest',
        '#description' => t('Configure ingest settings for this webform.'),
        '#collapsible' => FALSE,
        '#tree' => TRUE,
        'ingest_enabled' => array(
          '#type' => 'checkbox',
          '#title' => t('Enable'),
          '#description' => t('Enable ingest for this webform'),
          '#default_value' => $default_values['ingest_enabled'] ? $default_values['ingest_enabled'] : 0,
        ),
        'cmodel' => array(
          '#type' => 'select',
          '#title' => 'Ingest destination',
          '#description' => t('Select whether to ingest to the current object, or to a new object/content-model. <br />
          IMPORTANT: If you select to ingest to the current object, then a content model filter must be selected above.
          This is needed in order to be able to map submitted data to datastreams in your content model.'),
          '#default_value' => $default_values['cmodel'] ? $default_values['cmodel'] : '',
          '#options' => $cmodel_options,
        ),
        'relation' => array(
          '#type' => 'select',
          '#title' => 'Relationship to current object',
          '#description' => t('Select whether the newly created object should be a child of this object, or a member of this object\'s parent collection (i.e. sibling).'),
          '#default_value' => $default_values['relation'] ? $default_values['relation'] : 'child',
          '#options' => $relation_options,
          '#states' => array(
            // Hide if cmodel is not chosen.
            'invisible' => array(
              ':input[name="islandora_ingest[cmodel]"]' => array('value' => ''),
            ),
          ),
        ),
      );
      $form['#submit'][] = 'iwi_islandora_webform_configure_form_submit';
      $form['#validate'][] = 'iwi_islandora_webform_configure_form_validate';

      // Adjust weights.
      $form['islandora']['#weight'] = 0;
      $form['islandora_ingest']['#weight'] = 1;
      $form['actions']['#weight'] = 2;

    }
  }
}

/**
 * Delete a component ingest mapping.
 *
 * @param object $component
 *   A webform component
 */
function islandora_webform_ingest_webform_component_delete($component) {
  db_delete('islandora_webform_ingest_map')
    ->condition('nid', $component['nid'])
    ->condition('cid', $component['cid'])
    ->execute();
}

/**
 * Form submit hook for islandora_ingest-enabled webform_component_edit_form.
 *
 * @param array $form
 *   The webform_component_edit_form form array
 * @param array $form_state
 *   The webform_component_edit_form form_state array
 */
function iwi_webform_component_edit_form_submit($form, &$form_state) {
  form_load_include($form_state, 'inc', 'islandora_webform_ingest', 'includes/utilities');
  iwi_save_component_mapping($form, $form_state);
}

/**
 * Form validate hook for islandora_ingest-enabled webform_component_edit_form.
 *
 * @param array $form
 *   The webform_component_edit_form form array
 * @param array $form_state
 *   The webform_component_edit_form form_state array
 */
function iwi_webform_component_edit_form_validate($form, &$form_state) {

  if (isset($form['ingest']['fields_wrapper']['fields']['#required']) && $form['ingest']['fields_wrapper']['fields']['#required'] && empty($form_state['values']['ingest']['fields_wrapper']['fields'])) {

    form_set_error('ingest][fields_wrapper][fields', t('A field name is required.'));

  }

}

/**
 * Submit handler for webform ingest configuration sub-form.
 *
 * @param array $form
 *   the form
 * @param array $form_state
 *   the form state, passed by reference
 */
function iwi_islandora_webform_configure_form_submit($form, &$form_state) {
  form_load_include($form_state, 'inc', 'islandora_webform_ingest', 'includes/utilities');
  iwi_save_webform_configuration($form, $form_state);
}

/**
 * Form validate hook for  webform ingest configuration sub-form.
 *
 * @param array $form
 *   The form
 * @param array $form_state
 *   The form_state array
 */
function iwi_islandora_webform_configure_form_validate($form, &$form_state) {

  if ($form_state['values']['islandora_ingest']['ingest_enabled'] && empty($form_state['values']['islandora_ingest']['cmodel_filter']) && empty($form_state['values']['islandora_ingest']['cmodel'])) {

    form_set_error('islandora][cmodel_filter', t('If ingesting to current object, a content model filter must be chosen.'));

  }
}


/**
 * Build the component mapping destination options.
 *
 * @param array $form
 *   The component configuration form
 * @param array $form_state
 *   The component configuration form_state
 * @param IslandoraFedoraObject $cmodel
 *   The islandora fedora content model object
 * @param array $mimetypes
 *   A list of mimetypes if filtering by mimetype, otherwise an empty array
 *
 * @return array
 *   A renderable form array
 */
function islandora_webform_ingest_form_ingest_mapping_fields($form, $form_state, IslandoraFedoraObject $cmodel, $mimetypes = array()) {

  form_load_include($form_state, 'inc', 'islandora_webform_ingest', 'includes/utilities');

  // Get a list of the theoretically eligible destination datastreams.
  $datastreams = iwi_ingestable_datastreams($cmodel, $mimetypes);

  // The datastreams options list that we are building.
  $dsoptions = array();

  // Build the datastream options by filtering the eligible datastreams.
  foreach ($datastreams as $datastream => $dsdata) {
    $dsoptions[$datastream] = $datastream;
  }

  $saved_values = iwi_get_saved_component_mapping($form['#node']->nid, $form['cid']['#value']);

  // Set defaults from form state if present, from saved otherwise,
  // and if neither, set as NULL.
  $mode_value = isset($form_state['values']['ingest']['mode']) ? $form_state['values']['ingest']['mode'] : (isset($saved_values['mode']) ? $saved_values['mode'] : NULL);
  $datastream_value = isset($form_state['values']['ingest']['datastream']) ? $form_state['values']['ingest']['datastream'] : (isset($saved_values['datastream']) ? $saved_values['datastream'] : NULL);
  $field_value = isset($form_state['values']['ingest']['field_wrapper']['fields']) ? $form_state['values']['ingest']['field_wrapper']['fields'] : (isset($saved_values['field']) ? $saved_values['field'] : NULL);

  $elements = array(
    'mode' => array(
      '#title' => 'Ingest?',
      '#description' => t('Do you want to ingest this component? If so, do you want to replace existing content in this field, or append to it if possible?'),
      '#type' => 'select',
      '#options' => array(
        '' => 'Do not ingest',
        'replace' => 'Replace',
        'append' => 'Append',
      ),
      '#default_value' => $mode_value,
    ),
    'datastream' => array(
      '#title' => 'DataStream',
      '#type' => 'select',
      '#options' => array_merge(array('' => '- Select datastream -'), $dsoptions),
      '#default_value' => $datastream_value,
      '#ajax' => array(
        'event' => 'change',
        'callback' => 'iwi_ds_field_options_ajax',
        'wrapper' => 'ds_field_options',
      ),
    ),
    'fields_wrapper' => array(
      '#prefix' => '<div id="ds_field_options">',
      '#suffix' => '</div>',
    ),
  );


  if ($datastream_value && !empty($datastreams[$datastream_value]['form_name'])) {
    // Now work on the fields dropdown list.
    $ds_field_options = array('- Select field -');
    $ds_field_options = array_merge($ds_field_options, iwi_ds_field_options($datastreams[$datastream_value], $mimetypes));
    $ds_field_default = empty($form_state['values']['ingest']['fields_wrapper']['fields']) ? $field_value : $form_state['values']['ingest']['fields_wrapper']['fields'];

    $elements['fields_wrapper'] = array(
      '#prefix' => '<div id="ds_field_options">',
      '#suffix' => '</div>',
      'fields' => array(
        '#title' => 'Field',
        '#type' => 'select',
        '#options' => $ds_field_options,
        '#default_value' => $ds_field_default,
        '#required' => TRUE,
      ),
    );

  }
  return $elements;
}

/**
 * Get a list of webform component types that we can use as sources for ingest.
 *
 * @return array
 *   A list of component field types that can be sources for ingestion to a
 *   datastream.
 */
function islandora_webform_ingest_get_component_types() {

  $eligible_component_types = array(
    'date',
    'email',
    'file',
    'hidden',
    'number',
    'select',
    'textarea',
    'textfield',
    'time',
  );

  return array_intersect($eligible_component_types, array_keys(webform_components()));

}

/**
 * Function for handling ajax request
 *
 * @param array $form
 *   The whole drupal form
 * @param array $form_state
 *
 * @return array
 *   The portion of the form being reloaded via ajax
 */
function iwi_ds_field_options_ajax($form, &$form_state) {
  // Return the fields dropdown list including the wrapper.
  return $form['ingest']['fields_wrapper'];
}


/**
 * Get a list of ingestable fields from a given datastream edit form.
 *
 * @param array $association
 *   An xml form associated with the datastream
 * @param array $mimefilter
 *   An array of mimetypes that we are going to filter by; if empty, we permit
 *   all mimetypes.
 *
 * @return array
 *   An array to be used as the fields option list in a form
 */
function iwi_ds_field_options($association, $mimefilter = array()) {

  module_load_include('inc', 'islandora_webform_ingest', 'includes/utilities');

  $form_state = array();
  $form = array();

  // Get the render array for the datastream's edit form.
  $form = xml_form_builder_get_form($form, $form_state, $association['form_name']);

  $field_options = array();

  if ($form) {

    // Parse the form into an array with field path and mimetype for each
    // eligible field.
    $field_paths = iwi_form_field_paths($form);

    // Build the field options list, filtering out unsupported mimetypes.
    foreach ($field_paths as $field) {
      if (!empty($mimefilter)) {
        if (count(array_intersect($field['mimes'], (array) $mimefilter))) {
          $field_options[$field['field path']] = $field['field path'] . ' (' . implode(', ', $field['mimes']) . ')';
        }
      }
      else {
        $field_options[$field['field path']] = $field['field path'] . ' (' . implode(', ', $field['mimes']) . ')';
      }
    }
  }
  return $field_options;


}

/**
 * Implements hook_iw_results_object_submissions_page_element_alter().
 *
 * Here we are adding ingest links for individual submissions.
 * TODO If bulk ingest is implemented, we would add that here as well
 */
function islandora_webform_ingest_iw_results_object_submissions_page_element_alter(&$element) {
  if (user_access('ingest islandora webform submissions')) {

    // Failed to get ctools modal popup form to work.
    // TODO: Set $model to TRUE if we want to try again.
    $modal = FALSE;

    drupal_add_css(drupal_get_path('module', 'islandora_webform_ingest') . '/css/islandora_webform_ingest.css');

    if ($modal) {
      ctools_include('modal');
      ctools_modal_add_js();
    }
    else {
      $destination = drupal_get_destination();
    }


    $bulk = user_access('bulk ingest islandora webform submissions');
    // TODO FUTURE: Remove the next line to enable bulk ingestion.
    $bulk = FALSE;

    module_load_include('inc', 'islandora_webform', 'includes/utilities');
    module_load_include('inc', 'islandora_webform_ingest', 'includes/utilities');

    $submission_ids = array_keys($element['#submissions']);
    $pid = $element['#object']->id;

    foreach ($element['table']['#rows'] as $rownum => &$row) {
      // Check to see if this has previously been ingested, if so,
      // change link text.
      $ingested = iwi_get_ingestion_info($submission_ids[$rownum]);
      $link_text = t('Ingest');
      $link_options = array(
        'attributes' => array(
          'title' => t('Review and ingest this submission'),
          'class' => array(
            'islandora_webform_ingest',
          ),
        ),
      );
      if ($modal) {
        $link_options['attributes']['class'][] = 'ctools-use-modal';
        $link_url = 'islandora_webform_submission/nojs/ingest/' . $submission_ids[$rownum];
      }
      else {
        $link_options['query'] = $destination;
        $link_url = 'islandora_webform_submission/ingest/' . $submission_ids[$rownum];
      }
      if ($ingested) {
        $link_text = t('Re-Ingest');
        $link_options['attributes']['class'][] = 'ingested';
        $link_options['attributes']['title'] = t('This submission has previously been ingested. Click to review and re-ingest this submission');
      }

      // TODO: Set up a model ingestion preview/confirm popup
      // and configure this link to fire it.
      $link = l($link_text, $link_url, $link_options);
      $row[] = $link;
      if ($bulk) {
        // TODO FUTURE: Implement bulk ingestion - this is just for UI demo.
        array_unshift($row, '<input type="checkbox">');
      }
    }
    foreach ($element['table']['#header'] as $hkey => &$header) {
      if (isset($header['data']) && isset($header['colspan']) && $header['data'] == 'Operations') {
        $header['colspan'] += 1;
      }
    }
    if ($bulk) {
      // TODO FUTURE: Implement bulk ingestion - this is just for UI demo.
      array_unshift($element['table']['#header'], '<input type="checkbox">');
      $element['table']['#suffix'] = '<input type="submit" value="Bulk ingest">';
    }

    $element['table']['#operation_total'] += 1;
  }
}

/**
 * Ajax callback to render the ingest form.
 *
 * @param bool $js
 *   True if ajax enabled
 * @param int $sid
 *   The webform submission id
 *
 * @return array|mixed
 *   If js, return form array; otherwise, execute ajax render (no return)
 */
function iwi_preview_ingest_submission_form_callback($js, $sid) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Ingest Webform Submission'),
    );
    $form_state['build_info']['args'] = array($sid);
    $output = ctools_modal_form_wrapper('iwi_preview_ingest_submission_form', $form_state);
    if (!empty($form_state['executed'])) {

      // Add the responder javascript, required by ctools.
      ctools_add_js('ajax-responder');

      // Create ajax command array, dismiss the modal window.
      $output = array();
      $output[] = ctools_modal_command_dismiss();
      $output[] = ctools_ajax_command_reload();
    }
    ajax_render($output);
    exit;
  }
  else {
    module_load_include('inc', 'islandora_webform_ingest', 'includes/ingest_page');
    return drupal_get_form('iwi_preview_ingest_submission_form', $sid);
  }
}